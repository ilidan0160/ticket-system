{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\n// Use a more flexible type for socket to avoid immutability issues\n// Using any to avoid Socket type immutability issues with Redux\n\n// Message interface for ticket messages\n\n// Types\n\n// Interfaces\n\n// Initial state\nconst initialState = {\n  tickets: [],\n  currentTicket: null,\n  loading: false,\n  error: null,\n  updating: false,\n  socket: null,\n  total: 0,\n  totalPages: 0,\n  currentPage: 1,\n  filters: {\n    status: '',\n    priority: '',\n    categoria: '',\n    search: ''\n  },\n  stats: {\n    total: 0,\n    abierto: 0,\n    en_progreso: 0,\n    pendiente: 0,\n    resuelto: 0,\n    cerrado: 0\n  }\n};\n\n// Async thunks\nexport const fetchTickets = createAsyncThunk('tickets/fetchAll', async ({\n  page = 1,\n  limit = 10,\n  filters = {}\n}, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    const state = getState();\n    const currentFilters = state.tickets.filters;\n    const appliedFilters = {\n      ...currentFilters,\n      ...filters\n    };\n\n    // Remove empty filters\n    const cleanFilters = Object.fromEntries(Object.entries(appliedFilters).filter(([_, v]) => v !== ''));\n    const response = await api.get('/tickets', {\n      params: {\n        page,\n        limit,\n        ...cleanFilters\n      }\n    });\n    return {\n      tickets: response.data.tickets,\n      total: response.data.total,\n      totalPages: response.data.totalPages,\n      currentPage: page\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error fetching tickets');\n  }\n});\nexport const fetchTicketById = createAsyncThunk('tickets/fetchTicketById', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.get(`/tickets/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error fetching ticket');\n  }\n});\nexport const createTicket = createAsyncThunk('tickets/createTicket', async (ticketData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.post('/tickets', ticketData);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Error creating ticket');\n  }\n});\nexport const updateTicket = createAsyncThunk('tickets/updateTicket', async ({\n  id,\n  ...updates\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.put(`/tickets/${id}`, updates);\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return rejectWithValue(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Error updating ticket');\n  }\n});\nexport const deleteTicket = createAsyncThunk('tickets/deleteTicket', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    await api.delete(`/tickets/${id}`);\n    return id;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    return rejectWithValue(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Error deleting ticket');\n  }\n});\nexport const addMessage = createAsyncThunk('tickets/addMessage', async ({\n  ticketId,\n  message,\n  isInternal\n}, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    const state = getState();\n    const user = state.auth.user;\n    const response = await api.post('/chat/message', {\n      ticketId,\n      message,\n      isInternal\n    });\n\n    // Emit socket event\n    const socket = state.tickets.socket;\n    if (socket) {\n      const messageData = {\n        ...response.data,\n        user: {\n          id: (user === null || user === void 0 ? void 0 : user.id) || 0,\n          username: (user === null || user === void 0 ? void 0 : user.username) || 'System',\n          email: (user === null || user === void 0 ? void 0 : user.email) || ''\n        }\n      };\n      socket.emit('chat:new_message', messageData);\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    return rejectWithValue(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Error sending message');\n  }\n});\nexport const fetchTicketStats = createAsyncThunk('tickets/fetchStats', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.get('/tickets/stats');\n    return response.data;\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    return rejectWithValue(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Error fetching ticket stats');\n  }\n});\n\n// Reducer\nconst ticketSlice = createSlice({\n  name: 'tickets',\n  initialState,\n  reducers: {\n    setSocket: (state, action) => {\n      state.socket = action.payload;\n    },\n    setFilters: (state, action) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload\n      };\n    },\n    clearFilters: state => {\n      state.filters = {\n        status: '',\n        priority: '',\n        categoria: '',\n        search: ''\n      };\n    },\n    resetFilters: state => {\n      state.filters = initialState.filters;\n    },\n    addMessageLocally: (state, action) => {\n      if (state.currentTicket) {\n        if (!state.currentTicket.mensajes) {\n          state.currentTicket.mensajes = [];\n        }\n        state.currentTicket.mensajes.push(action.payload);\n      }\n    },\n    clearCurrentTicket: state => {\n      state.currentTicket = null;\n    },\n    resetTicketState: () => initialState,\n    updateCurrentTicket: (state, action) => {\n      var _state$currentTicket;\n      if (((_state$currentTicket = state.currentTicket) === null || _state$currentTicket === void 0 ? void 0 : _state$currentTicket.id) === action.payload.id) state.currentTicket = action.payload;\n    },\n    removeTicket: (state, action) => {\n      var _state$currentTicket2;\n      state.tickets = state.tickets.filter(t => t.id !== action.payload);\n      if (((_state$currentTicket2 = state.currentTicket) === null || _state$currentTicket2 === void 0 ? void 0 : _state$currentTicket2.id) === action.payload) state.currentTicket = null;\n      state.total = Math.max(0, state.total - 1);\n    }\n  },\n  extraReducers: builder => {\n    // Chain all cases in a single builder chain to avoid duplicate builder declarations\n    builder\n    // Fetch Tickets\n    .addCase(fetchTickets.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchTickets.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tickets = action.payload.tickets;\n      state.total = action.payload.total;\n      state.totalPages = action.payload.totalPages;\n      state.currentPage = action.payload.currentPage;\n    }).addCase(fetchTickets.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Fetch Ticket By ID\n    .addCase(fetchTicketById.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchTicketById.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentTicket = action.payload;\n    }).addCase(fetchTicketById.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Create Ticket\n    .addCase(createTicket.pending, state => {\n      state.updating = true;\n      state.error = null;\n    }).addCase(createTicket.fulfilled, (state, action) => {\n      state.updating = false;\n      state.tickets.unshift(action.payload);\n      state.total += 1;\n    }).addCase(createTicket.rejected, (state, action) => {\n      state.updating = false;\n      state.error = action.payload;\n    })\n    // Update Ticket\n    .addCase(updateTicket.pending, state => {\n      state.updating = true;\n      state.error = null;\n    }).addCase(updateTicket.fulfilled, (state, action) => {\n      var _state$currentTicket3;\n      state.updating = false;\n      const index = state.tickets.findIndex(t => t.id === action.payload.id);\n      if (index !== -1) {\n        state.tickets[index] = action.payload;\n      }\n      if (((_state$currentTicket3 = state.currentTicket) === null || _state$currentTicket3 === void 0 ? void 0 : _state$currentTicket3.id) === action.payload.id) {\n        state.currentTicket = action.payload;\n      }\n    }).addCase(updateTicket.rejected, (state, action) => {\n      state.updating = false;\n      state.error = action.payload;\n    })\n    // Delete Ticket\n    .addCase(deleteTicket.pending, state => {\n      state.updating = true;\n      state.error = null;\n    }).addCase(deleteTicket.fulfilled, (state, action) => {\n      var _state$currentTicket4;\n      state.updating = false;\n      state.tickets = state.tickets.filter(ticket => ticket.id !== action.payload);\n      state.total = Math.max(0, state.total - 1);\n      if (((_state$currentTicket4 = state.currentTicket) === null || _state$currentTicket4 === void 0 ? void 0 : _state$currentTicket4.id) === action.payload) {\n        state.currentTicket = null;\n      }\n    }).addCase(deleteTicket.rejected, (state, action) => {\n      state.updating = false;\n      state.error = action.payload;\n    })\n    // Add Message\n    .addCase(addMessage.pending, state => {\n      state.updating = true;\n    }).addCase(addMessage.fulfilled, (state, action) => {\n      state.updating = false;\n      if (state.currentTicket) {\n        if (!state.currentTicket.mensajes) {\n          state.currentTicket.mensajes = [];\n        }\n        state.currentTicket.mensajes.push(action.payload);\n      }\n    }).addCase(addMessage.rejected, (state, action) => {\n      state.updating = false;\n      state.error = action.payload;\n    })\n    // Fetch Ticket Stats\n    .addCase(fetchTicketStats.fulfilled, (state, action) => {\n      state.stats = action.payload;\n    });\n  }\n});\n\n// Export actions\nexport const {\n  setSocket,\n  setFilters,\n  resetFilters,\n  addMessageLocally,\n  clearCurrentTicket,\n  resetTicketState\n} = ticketSlice.actions;\n\n// Export selectors\nexport const selectTickets = state => state.tickets.tickets;\nexport const selectCurrentTicket = state => state.tickets.currentTicket;\nexport const selectLoading = state => state.tickets.loading;\nexport const selectUpdating = state => state.tickets.updating;\nexport const selectError = state => state.tickets.error;\nexport const selectTicketStats = state => state.tickets.stats;\nexport const selectTicketFilters = state => state.tickets.filters;\nexport const selectTicketPagination = state => ({\n  total: state.tickets.total,\n  totalPages: state.tickets.totalPages,\n  currentPage: state.tickets.currentPage\n});\nexport default ticketSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","initialState","tickets","currentTicket","loading","error","updating","socket","total","totalPages","currentPage","filters","status","priority","categoria","search","stats","abierto","en_progreso","pendiente","resuelto","cerrado","fetchTickets","page","limit","getState","rejectWithValue","state","currentFilters","appliedFilters","cleanFilters","Object","fromEntries","entries","filter","_","v","response","get","params","data","_error$response","_error$response$data","message","fetchTicketById","id","_error$response2","_error$response2$data","createTicket","ticketData","post","_error$response3","_error$response3$data","updateTicket","updates","put","_error$response4","_error$response4$data","deleteTicket","delete","_error$response5","_error$response5$data","addMessage","ticketId","isInternal","user","auth","messageData","username","email","emit","_error$response6","_error$response6$data","fetchTicketStats","_error$response7","_error$response7$data","ticketSlice","name","reducers","setSocket","action","payload","setFilters","clearFilters","resetFilters","addMessageLocally","mensajes","push","clearCurrentTicket","resetTicketState","updateCurrentTicket","_state$currentTicket","removeTicket","_state$currentTicket2","t","Math","max","extraReducers","builder","addCase","pending","fulfilled","rejected","unshift","_state$currentTicket3","index","findIndex","_state$currentTicket4","ticket","actions","selectTickets","selectCurrentTicket","selectLoading","selectUpdating","selectError","selectTicketStats","selectTicketFilters","selectTicketPagination","reducer"],"sources":["/home/anthony/Escritorio/ticket-system/frontend/src/features/tickets/ticketSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport api from '../../services/api';\n\n// Use a more flexible type for socket to avoid immutability issues\ntype SocketType = any; // Using any to avoid Socket type immutability issues with Redux\n\n// Message interface for ticket messages\ninterface Message {\n  id: number;\n  contenido: string;\n  esInterno: boolean;\n  ticketId: number;\n  usuarioId: number;\n  createdAt: string;\n  updatedAt: string;\n  usuario?: User;\n}\n\n// Types\ntype Filters = {\n  status: string;\n  priority: string;\n  categoria: string;\n  search: string;\n};\n\ntype FetchTicketsParams = {\n  page?: number;\n  limit?: number;\n  filters?: Partial<Filters>;\n};\n\n// Interfaces\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  avatar?: string;\n  role: string;\n}\n\ninterface Message {\n  id: number;\n  mensaje: string;\n  isInternal: boolean;\n  ticketId: number;\n  userId: number;\n  createdAt: string;\n  updatedAt: string;\n  user?: User;\n}\n\nexport interface Ticket {\n  id: number;\n  asunto: string;\n  descripcion: string;\n  prioridad: string;\n  estado: string;\n  categoria: string;\n  solicitanteId: number;\n  asignadoAId: number | null;\n  createdAt: string;\n  updatedAt: string;\n  solicitante?: User;\n  asignadoA?: User | null;\n  mensajes?: Message[];\n}\n\ninterface TicketState {\n  tickets: Ticket[];\n  currentTicket: Ticket | null;\n  loading: boolean;\n  error: string | null;\n  updating: boolean;\n  socket: SocketType;\n  total: number;\n  totalPages: number;\n  currentPage: number;\n  filters: Filters;\n  stats: {\n    total: number;\n    abierto: number;\n    en_progreso: number;\n    pendiente: number;\n    resuelto: number;\n    cerrado: number;\n  };\n}\n\n// Initial state\nconst initialState: TicketState = {\n  tickets: [],\n  currentTicket: null,\n  loading: false,\n  error: null,\n  updating: false,\n  socket: null as unknown as SocketType,\n  total: 0,\n  totalPages: 0,\n  currentPage: 1,\n  filters: {\n    status: '',\n    priority: '',\n    categoria: '',\n    search: '',\n  },\n  stats: {\n    total: 0,\n    abierto: 0,\n    en_progreso: 0,\n    pendiente: 0,\n    resuelto: 0,\n    cerrado: 0,\n  },\n};\n\n// Async thunks\nexport const fetchTickets = createAsyncThunk<\n  {\n    tickets: Ticket[];\n    total: number;\n    totalPages: number;\n    currentPage: number;\n  },\n  FetchTicketsParams,\n  { state: RootState }\n>(\n  'tickets/fetchAll',\n  async ({ page = 1, limit = 10, filters = {} }, { getState, rejectWithValue }) => {\n    try {\n      const state = getState();\n      const currentFilters = state.tickets.filters;\n      const appliedFilters = { ...currentFilters, ...filters };\n      \n      // Remove empty filters\n      const cleanFilters = Object.fromEntries(\n        Object.entries(appliedFilters).filter(([_, v]) => v !== '')\n      );\n      \n      const response = await api.get<{\n        tickets: Ticket[];\n        total: number;\n        totalPages: number;\n      }>('/tickets', {\n        params: {\n          page,\n          limit,\n          ...cleanFilters,\n        },\n      });\n      \n      return {\n        tickets: response.data.tickets,\n        total: response.data.total,\n        totalPages: response.data.totalPages,\n        currentPage: page,\n      };\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.message || 'Error fetching tickets') as any;\n    }\n  }\n);\n\nexport const fetchTicketById = createAsyncThunk<Ticket, number, { state: RootState }>(\n  'tickets/fetchTicketById',\n  async (id, { rejectWithValue }) => {\n    try {\n      const response = await api.get<Ticket>(`/tickets/${id}`);\n      return response.data;\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.message || 'Error fetching ticket') as any;\n    }\n  }\n);\n\ninterface CreateTicketData {\n  asunto: string;\n  descripcion: string;\n  prioridad: string;\n  categoria: string;\n  estado?: string; // Made optional to match form data\n  solicitanteId: number;\n  asignadoAId?: number | null;\n}\n\nexport const createTicket = createAsyncThunk<Ticket, CreateTicketData, { state: RootState }>(\n  'tickets/createTicket',\n  async (ticketData, { rejectWithValue }) => {\n    try {\n      const response = await api.post<CreateTicketData>('/tickets', ticketData);\n      return response.data as Ticket;\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.message || 'Error creating ticket') as any;\n    }\n  }\n);\n\ninterface UpdateTicketData {\n  id: number;\n  asunto?: string;\n  descripcion?: string;\n  prioridad?: string;\n  estado?: string;\n  categoria?: string;\n  asignadoAId?: number | null;\n}\n\nexport const updateTicket = createAsyncThunk<Ticket, UpdateTicketData, { state: RootState }>(\n  'tickets/updateTicket',\n  async ({ id, ...updates }, { rejectWithValue }) => {\n    try {\n      const response = await api.put<UpdateTicketData>(`/tickets/${id}`, updates);\n      return response.data as Ticket;\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.message || 'Error updating ticket') as any;\n    }\n  }\n);\n\nexport const deleteTicket = createAsyncThunk<number, number>(\n  'tickets/deleteTicket',\n  async (id, { rejectWithValue }) => {\n    try {\n      await api.delete(`/tickets/${id}`);\n      return id;\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.message || 'Error deleting ticket');\n    }\n  }\n);\n\ninterface AddMessagePayload {\n  ticketId: number;\n  message: string;\n  isInternal: boolean;\n}\n\nexport const addMessage = createAsyncThunk<Message, AddMessagePayload, { state: RootState }>(\n  'tickets/addMessage',\n  async ({ ticketId, message, isInternal }, { getState, rejectWithValue }) => {\n    try {\n      const state = getState();\n      const user = state.auth.user;\n      \n      const response = await api.post<Message>('/chat/message', {\n        ticketId,\n        message,\n        isInternal,\n      });\n      \n      // Emit socket event\n      const socket = state.tickets.socket;\n      if (socket) {\n        const messageData = {\n          ...response.data,\n          user: { \n            id: user?.id || 0, \n            username: user?.username || 'System', \n            email: user?.email || '' \n          },\n        };\n        socket.emit('chat:new_message', messageData);\n      }\n      \n      return response.data;\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.message || 'Error sending message') as any;\n    }\n  }\n);\n\nexport const fetchTicketStats = createAsyncThunk<\n  {\n    total: number;\n    abierto: number;\n    en_progreso: number;\n    pendiente: number;\n    resuelto: number;\n    cerrado: number;\n  }\n>(\n  'tickets/fetchStats',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await api.get('/tickets/stats');\n      return response.data;\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.message || 'Error fetching ticket stats');\n    }\n  }\n);\n\n// Reducer\nconst ticketSlice = createSlice({\n  name: 'tickets',\n  initialState,\n  reducers: {\n    setSocket: (state, action: PayloadAction<SocketType>) => {\n      state.socket = action.payload;\n    },\n    setFilters: (state, action: PayloadAction<Partial<Filters>>) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload,\n      };\n    },\n    clearFilters: (state) => {\n      state.filters = {\n        status: '',\n        priority: '',\n        categoria: '',\n        search: '',\n      };\n    },\n    resetFilters: (state) => {\n      state.filters = initialState.filters;\n    },\n    addMessageLocally: (state, action: PayloadAction<Message>) => {\n      if (state.currentTicket) {\n        if (!state.currentTicket.mensajes) {\n          state.currentTicket.mensajes = [];\n        }\n        state.currentTicket.mensajes.push(action.payload);\n      }\n    },\n    clearCurrentTicket: (state) => {\n      state.currentTicket = null;\n    },\n    resetTicketState: () => initialState,\n    updateCurrentTicket: (state, action: PayloadAction<Ticket>) => {\n      if (state.currentTicket?.id === action.payload.id) state.currentTicket = action.payload;\n    },\n    removeTicket: (state, action: PayloadAction<number>) => {\n      state.tickets = state.tickets.filter((t) => t.id !== action.payload);\n      if (state.currentTicket?.id === action.payload) state.currentTicket = null;\n      state.total = Math.max(0, state.total - 1);\n    },\n  },\n  extraReducers: (builder) => {\n    // Chain all cases in a single builder chain to avoid duplicate builder declarations\n    builder\n      // Fetch Tickets\n      .addCase(fetchTickets.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchTickets.fulfilled, (state, action) => {\n        state.loading = false;\n        state.tickets = action.payload.tickets;\n        state.total = action.payload.total;\n        state.totalPages = action.payload.totalPages;\n        state.currentPage = action.payload.currentPage;\n      })\n      .addCase(fetchTickets.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      })\n      // Fetch Ticket By ID\n      .addCase(fetchTicketById.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchTicketById.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentTicket = action.payload;\n      })\n      .addCase(fetchTicketById.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      })\n      // Create Ticket\n      .addCase(createTicket.pending, (state) => {\n        state.updating = true;\n        state.error = null;\n      })\n      .addCase(createTicket.fulfilled, (state, action) => {\n        state.updating = false;\n        state.tickets.unshift(action.payload);\n        state.total += 1;\n      })\n      .addCase(createTicket.rejected, (state, action) => {\n        state.updating = false;\n        state.error = action.payload as string;\n      })\n      // Update Ticket\n      .addCase(updateTicket.pending, (state) => {\n        state.updating = true;\n        state.error = null;\n      })\n      .addCase(updateTicket.fulfilled, (state, action) => {\n        state.updating = false;\n        const index = state.tickets.findIndex(t => t.id === action.payload.id);\n        if (index !== -1) {\n          state.tickets[index] = action.payload;\n        }\n        if (state.currentTicket?.id === action.payload.id) {\n          state.currentTicket = action.payload;\n        }\n      })\n      .addCase(updateTicket.rejected, (state, action) => {\n        state.updating = false;\n        state.error = action.payload as string;\n      })\n      // Delete Ticket\n      .addCase(deleteTicket.pending, (state) => {\n        state.updating = true;\n        state.error = null;\n      })\n      .addCase(deleteTicket.fulfilled, (state, action) => {\n        state.updating = false;\n        state.tickets = state.tickets.filter(ticket => ticket.id !== action.payload);\n        state.total = Math.max(0, state.total - 1);\n        if (state.currentTicket?.id === action.payload) {\n          state.currentTicket = null;\n        }\n      })\n      .addCase(deleteTicket.rejected, (state, action) => {\n        state.updating = false;\n        state.error = action.payload as string;\n      })\n      // Add Message\n      .addCase(addMessage.pending, (state) => {\n        state.updating = true;\n      })\n      .addCase(addMessage.fulfilled, (state, action) => {\n        state.updating = false;\n        if (state.currentTicket) {\n          if (!state.currentTicket.mensajes) {\n            state.currentTicket.mensajes = [];\n          }\n          state.currentTicket.mensajes.push(action.payload);\n        }\n      })\n      .addCase(addMessage.rejected, (state, action) => {\n        state.updating = false;\n        state.error = action.payload as string;\n      })\n      // Fetch Ticket Stats\n      .addCase(fetchTicketStats.fulfilled, (state, action) => {\n        state.stats = action.payload;\n      });\n  },\n});\n\n// Export actions\nexport const { \n  setSocket, \n  setFilters, \n  resetFilters, \n  addMessageLocally, \n  clearCurrentTicket, \n  resetTicketState \n} = ticketSlice.actions;\n\n// Export selectors\nexport const selectTickets = (state: RootState) => state.tickets.tickets;\nexport const selectCurrentTicket = (state: RootState) => state.tickets.currentTicket;\nexport const selectLoading = (state: RootState) => state.tickets.loading;\nexport const selectUpdating = (state: RootState) => state.tickets.updating;\nexport const selectError = (state: RootState) => state.tickets.error;\nexport const selectTicketStats = (state: RootState) => state.tickets.stats;\nexport const selectTicketFilters = (state: RootState) => state.tickets.filters;\nexport const selectTicketPagination = (state: RootState) => ({\n  total: state.tickets.total,\n  totalPages: state.tickets.totalPages,\n  currentPage: state.tickets.currentPage,\n});\n\nexport default ticketSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}