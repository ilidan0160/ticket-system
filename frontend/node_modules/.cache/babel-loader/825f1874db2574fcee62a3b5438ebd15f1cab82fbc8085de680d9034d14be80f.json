{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { addMessage, setTyping } from '../features/chat/chatSlice';\nimport { setSocket as setTicketSocket } from '../features/tickets/ticketSlice';\nconst socketMiddleware = () => {\n  let socket = null;\n  return store => next => action => {\n    const {\n      dispatch\n    } = store;\n    const {\n      type,\n      payload\n    } = action;\n\n    // Initialize socket connection on user login\n    if (type === 'auth/login/fulfilled' || type === 'auth/loadUser/fulfilled') {\n      if (socket) {\n        socket.disconnect();\n      }\n      const token = (payload === null || payload === void 0 ? void 0 : payload.token) || store.getState().auth.token;\n      if (!token) return next(action);\n      socket = io(process.env.REACT_APP_API_URL || 'http://localhost:5000', {\n        auth: {\n          token\n        }\n      });\n\n      // Set up socket event listeners\n      socket.on('connect', () => {\n        console.log('Connected to WebSocket server');\n      });\n\n      // Ticket events\n      socket.on('ticket:created', ticket => {\n        dispatch({\n          type: 'tickets/updateCurrentTicket',\n          payload: ticket\n        });\n      });\n      socket.on('ticket:updated', ticket => {\n        dispatch({\n          type: 'tickets/updateCurrentTicket',\n          payload: ticket\n        });\n      });\n      socket.on('ticket:deleted', ({\n        id\n      }) => {\n        dispatch({\n          type: 'tickets/removeTicket',\n          payload: id\n        });\n      });\n\n      // Chat events\n      socket.on('chat:new_message', message => {\n        dispatch({\n          type: 'tickets/addMessageLocally',\n          payload: message\n        });\n        // Also dispatch to chat slice if needed\n        dispatch(addMessage(message));\n      });\n      socket.on('chat:message_updated', updatedMessage => {\n        // Handle message update if needed\n        console.log('Message updated:', updatedMessage);\n      });\n      socket.on('chat:message_deleted', ({\n        id\n      }) => {\n        // Handle message deletion if needed\n        console.log('Message deleted:', id);\n      });\n      socket.on('chat:typing', ({\n        userId,\n        isTyping\n      }) => {\n        dispatch(setTyping({\n          userId,\n          isTyping\n        }));\n      });\n\n      // Store the socket instance in the Redux store\n      dispatch(setTicketSocket(socket));\n      // Dispatch to chat slice if it has a setSocket action\n      import('../features/chat/chatSlice').then(chatModule => {\n        // Use type assertion to avoid TypeScript error\n        const chatSlice = chatModule;\n        if (chatSlice.setSocket) {\n          chatSlice.setSocket(socket);\n        }\n      }).catch(error => {\n        console.warn('Chat slice not found or does not have setSocket action', error);\n      });\n    }\n\n    // Handle disconnection on logout\n    if (type === 'auth/logout/fulfilled' && socket) {\n      socket.disconnect();\n      socket = null;\n    }\n\n    // Handle chat actions\n    if (type === 'chat/sendMessage/pending' && socket) {\n      const {\n        ticketId\n      } = payload.arg;\n      socket.emit('chat:typing', {\n        ticketId,\n        isTyping: false\n      });\n    }\n\n    // Handle typing indicator\n    if (type === 'chat/setTyping' && socket) {\n      const {\n        ticketId,\n        isTyping\n      } = payload;\n      socket.emit('chat:typing', {\n        ticketId,\n        isTyping\n      });\n    }\n    return next(action);\n  };\n};\nexport default socketMiddleware;","map":{"version":3,"names":["io","addMessage","setTyping","setSocket","setTicketSocket","socketMiddleware","socket","store","next","action","dispatch","type","payload","disconnect","token","getState","auth","process","env","REACT_APP_API_URL","on","console","log","ticket","id","message","updatedMessage","userId","isTyping","then","chatModule","chatSlice","catch","error","warn","ticketId","arg","emit"],"sources":["/home/anthony/Escritorio/ticket-system/frontend/src/middleware/socketMiddleware.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\nimport { Middleware, AnyAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { addMessage, setTyping } from '../features/chat/chatSlice';\nimport { setSocket as setTicketSocket } from '../features/tickets/ticketSlice';\nimport { Ticket, Message as TicketMessage } from '../features/tickets/types';\n\nconst socketMiddleware = (): Middleware<{}, RootState> => {\n  let socket: Socket | null = null;\n\n  return (store) => (next) => (action: AnyAction) => {\n    const { dispatch } = store;\n    const { type, payload } = action;\n\n    // Initialize socket connection on user login\n    if (type === 'auth/login/fulfilled' || type === 'auth/loadUser/fulfilled') {\n      if (socket) {\n        socket.disconnect();\n      }\n\n      const token = payload?.token || store.getState().auth.token;\n      if (!token) return next(action);\n\n      socket = io(process.env.REACT_APP_API_URL || 'http://localhost:5000', {\n        auth: { token },\n      });\n\n      // Set up socket event listeners\n      socket.on('connect', () => {\n        console.log('Connected to WebSocket server');\n      });\n\n      // Ticket events\n      socket.on('ticket:created', (ticket: Ticket) => {\n        dispatch({ type: 'tickets/updateCurrentTicket', payload: ticket });\n      });\n\n      socket.on('ticket:updated', (ticket: Ticket) => {\n        dispatch({ type: 'tickets/updateCurrentTicket', payload: ticket });\n      });\n\n      socket.on('ticket:deleted', ({ id }: { id: number }) => {\n        dispatch({ type: 'tickets/removeTicket', payload: id });\n      });\n\n      // Chat events\n      socket.on('chat:new_message', (message: TicketMessage) => {\n        dispatch({ type: 'tickets/addMessageLocally', payload: message });\n        // Also dispatch to chat slice if needed\n        dispatch(addMessage(message));\n      });\n\n      socket.on('chat:message_updated', (updatedMessage: TicketMessage) => {\n        // Handle message update if needed\n        console.log('Message updated:', updatedMessage);\n      });\n\n      socket.on('chat:message_deleted', ({ id }: { id: string }) => {\n        // Handle message deletion if needed\n        console.log('Message deleted:', id);\n      });\n\n      socket.on('chat:typing', ({ userId, isTyping }: { userId: string; isTyping: boolean }) => {\n        dispatch(setTyping({ userId, isTyping }));\n      });\n\n      // Store the socket instance in the Redux store\n      dispatch(setTicketSocket(socket));\n      // Dispatch to chat slice if it has a setSocket action\n      import('../features/chat/chatSlice')\n        .then(chatModule => {\n          // Use type assertion to avoid TypeScript error\n          const chatSlice = chatModule as { setSocket?: (socket: Socket | null) => any };\n          if (chatSlice.setSocket) {\n            chatSlice.setSocket(socket);\n          }\n        })\n        .catch(error => {\n          console.warn('Chat slice not found or does not have setSocket action', error);\n        });\n    }\n\n    // Handle disconnection on logout\n    if (type === 'auth/logout/fulfilled' && socket) {\n      socket.disconnect();\n      socket = null;\n    }\n\n    // Handle chat actions\n    if (type === 'chat/sendMessage/pending' && socket) {\n      const { ticketId } = payload.arg;\n      socket.emit('chat:typing', { ticketId, isTyping: false });\n    }\n\n    // Handle typing indicator\n    if (type === 'chat/setTyping' && socket) {\n      const { ticketId, isTyping } = payload;\n      socket.emit('chat:typing', { ticketId, isTyping });\n    }\n\n    return next(action);\n  };\n};\n\nexport default socketMiddleware;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}