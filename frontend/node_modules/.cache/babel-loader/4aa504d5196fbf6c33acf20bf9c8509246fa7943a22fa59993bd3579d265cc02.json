{"ast":null,"code":"import axios from 'axios';\nimport { store } from '../app/store';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token\napi.interceptors.request.use(config => {\n  const token = store.getState().auth.token;\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config; // Type assertion to handle Axios type issues\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    store.dispatch({\n      type: 'auth/logout'\n    });\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: data => api.post('/auth/register', data),\n  login: data => api.post('/auth/login', data),\n  getMe: () => api.get('/auth/me'),\n  logout: () => api.post('/auth/logout')\n};\n\n// Tickets API\nexport const ticketsAPI = {\n  getTickets: params => api.get('/tickets', {\n    params\n  }),\n  getTicket: id => api.get(`/tickets/${id}`),\n  createTicket: data => api.post('/tickets', data),\n  updateTicket: (id, data) => api.put(`/tickets/${id}`, data),\n  deleteTicket: id => api.delete(`/tickets/${id}`),\n  getTicketStats: () => api.get('/tickets/stats')\n};\n\n// Chat API\nexport const chatAPI = {\n  getMessages: ticketId => api.get(`/chat/ticket/${ticketId}`),\n  sendMessage: data => api.post('/chat/message', data),\n  updateMessage: (messageId, data) => api.put(`/chat/message/${messageId}`, data),\n  deleteMessage: messageId => api.delete(`/chat/message/${messageId}`)\n};\n\n// Users API\nexport const usersAPI = {\n  getUsers: () => api.get('/users'),\n  getUser: id => api.get(`/users/${id}`),\n  updateUser: (id, data) => api.put(`/users/${id}`, data),\n  deleteUser: id => api.delete(`/users/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","store","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","getState","auth","Authorization","error","Promise","reject","response","_error$response","status","dispatch","type","authAPI","register","data","post","login","getMe","get","logout","ticketsAPI","getTickets","params","getTicket","id","createTicket","updateTicket","put","deleteTicket","delete","getTicketStats","chatAPI","getMessages","ticketId","sendMessage","updateMessage","messageId","deleteMessage","usersAPI","getUsers","getUser","updateUser","deleteUser"],"sources":["/home/anthony/Escritorio/ticket-system/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { store } from '../app/store';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include the auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = store.getState().auth.token;\n    if (token) {\n      config.headers = config.headers || {};\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config as any; // Type assertion to handle Axios type issues\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle errors\napi.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error: AxiosError) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized access\n      store.dispatch({ type: 'auth/logout' });\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  register: (data: { username: string; email: string; password: string }) =>\n    api.post('/auth/register', data),\n  login: (data: { email: string; password: string }) =>\n    api.post('/auth/login', data),\n  getMe: () => api.get('/auth/me'),\n  logout: () => api.post('/auth/logout'),\n};\n\n// Tickets API\nexport const ticketsAPI = {\n  getTickets: (params?: any) => api.get('/tickets', { params }),\n  getTicket: (id: number) => api.get(`/tickets/${id}`),\n  createTicket: (data: any) => api.post('/tickets', data),\n  updateTicket: (id: number, data: any) => api.put(`/tickets/${id}`, data),\n  deleteTicket: (id: number) => api.delete(`/tickets/${id}`),\n  getTicketStats: () => api.get('/tickets/stats'),\n};\n\n// Chat API\nexport const chatAPI = {\n  getMessages: (ticketId: number) => api.get(`/chat/ticket/${ticketId}`),\n  sendMessage: (data: { ticketId: number; message: string; isInternal?: boolean }) =>\n    api.post('/chat/message', data),\n  updateMessage: (messageId: number, data: { message: string }) =>\n    api.put(`/chat/message/${messageId}`, data),\n  deleteMessage: (messageId: number) =>\n    api.delete(`/chat/message/${messageId}`),\n};\n\n// Users API\nexport const usersAPI = {\n  getUsers: () => api.get('/users'),\n  getUser: (id: number) => api.get(`/users/${id}`),\n  updateUser: (id: number, data: any) => api.put(`/users/${id}`, data),\n  deleteUser: (id: number) => api.delete(`/users/${id}`),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}