{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Escritorio/ticket-system/frontend/src/components/auth/ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectIsAuthenticated, selectAuthLoading } from '../../features/auth/authSelectors';\nimport { CircularProgress, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requireAdmin = false\n}) => {\n  _s();\n  const location = useLocation();\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  const loading = useSelector(selectAuthLoading);\n  // Add admin check logic here if needed\n  // const isAdmin = useSelector(selectIsAdmin);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"80vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isAuthenticated) {\n    // Redirect them to the /login page, but save the current location they were\n    // trying to go to when they were redirected. This allows us to send them\n    // along to that page after they log in.\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Add admin check if needed\n  // if (requireAdmin && !isAdmin) {\n  //   return <Navigate to=\"/unauthorized\" state={{ from: location }} replace />;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s(ProtectedRoute, \"lKmk9IXGE1kCmxnyamoDTEkwQ3Q=\", false, function () {\n  return [useLocation, useSelector, useSelector];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","useLocation","useSelector","selectIsAuthenticated","selectAuthLoading","CircularProgress","Box","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","requireAdmin","_s","location","isAuthenticated","loading","display","justifyContent","alignItems","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","replace","_c","$RefreshReg$"],"sources":["/home/anthony/Escritorio/ticket-system/frontend/src/components/auth/ProtectedRoute.tsx"],"sourcesContent":["import { ReactNode, useEffect } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectIsAuthenticated, selectAuthLoading } from '../../features/auth/authSelectors';\nimport { CircularProgress, Box } from '@mui/material';\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  requireAdmin?: boolean;\n}\n\nconst ProtectedRoute = ({ children, requireAdmin = false }: ProtectedRouteProps) => {\n  const location = useLocation();\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  const loading = useSelector(selectAuthLoading);\n  // Add admin check logic here if needed\n  // const isAdmin = useSelector(selectIsAdmin);\n\n  if (loading) {\n    return (\n      <Box \n        display=\"flex\" \n        justifyContent=\"center\" \n        alignItems=\"center\" \n        minHeight=\"80vh\"\n      >\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (!isAuthenticated) {\n    // Redirect them to the /login page, but save the current location they were\n    // trying to go to when they were redirected. This allows us to send them\n    // along to that page after they log in.\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  // Add admin check if needed\n  // if (requireAdmin && !isAdmin) {\n  //   return <Navigate to=\"/unauthorized\" state={{ from: location }} replace />;\n  // }\n\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AACA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,qBAAqB,EAAEC,iBAAiB,QAAQ,mCAAmC;AAC5F,SAASC,gBAAgB,EAAEC,GAAG,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAOtD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,YAAY,GAAG;AAA2B,CAAC,KAAK;EAAAC,EAAA;EAClF,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAMe,eAAe,GAAGd,WAAW,CAACC,qBAAqB,CAAC;EAC1D,MAAMc,OAAO,GAAGf,WAAW,CAACE,iBAAiB,CAAC;EAC9C;EACA;;EAEA,IAAIa,OAAO,EAAE;IACX,oBACET,OAAA,CAACF,GAAG;MACFY,OAAO,EAAC,MAAM;MACdC,cAAc,EAAC,QAAQ;MACvBC,UAAU,EAAC,QAAQ;MACnBC,SAAS,EAAC,MAAM;MAAAT,QAAA,eAEhBJ,OAAA,CAACH,gBAAgB;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAEV;EAEA,IAAI,CAACT,eAAe,EAAE;IACpB;IACA;IACA;IACA,oBAAOR,OAAA,CAACR,QAAQ;MAAC0B,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEb;MAAS,CAAE;MAACc,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;;EAEA;EACA;EACA;EACA;;EAEA,oBAAOjB,OAAA,CAAAE,SAAA;IAAAE,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACE,EAAA,CAjCIH,cAAc;EAAA,QACDV,WAAW,EACJC,WAAW,EACnBA,WAAW;AAAA;AAAA4B,EAAA,GAHvBnB,cAAc;AAmCpB,eAAeA,cAAc;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}