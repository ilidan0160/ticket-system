{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Tipos para el estado del dashboard\n\n// Tipos exportados\n\n// Estado inicial\nconst initialState = {\n  data: null,\n  loading: false,\n  error: null\n};\n\n// Async thunk para obtener los datos del dashboard\nexport const fetchDashboardData = createAsyncThunk('dashboard/fetchData', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    // En una aplicación real, esto haría una llamada a la API\n    // const response = await axios.get('/api/dashboard');\n    // return response.data;\n\n    // Datos de ejemplo para desarrollo\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          totalTickets: 48,\n          openTickets: 12,\n          inProgressTickets: 8,\n          resolvedTickets: 23,\n          waitingTickets: 5,\n          recentTickets: [{\n            id: 1,\n            title: 'Problema con el correo',\n            status: 'Abierto',\n            priority: 'Alta',\n            category: 'Correo',\n            createdAt: '2025-08-20'\n          }, {\n            id: 2,\n            title: 'Error en el sistema',\n            status: 'En Progreso',\n            priority: 'Crítica',\n            category: 'Software',\n            createdAt: '2025-08-20'\n          }, {\n            id: 3,\n            title: 'Impresora no funciona',\n            status: 'En Espera',\n            priority: 'Media',\n            category: 'Hardware',\n            createdAt: '2025-08-19'\n          }, {\n            id: 4,\n            title: 'Acceso denegado',\n            status: 'Resuelto',\n            priority: 'Baja',\n            category: 'Cuentas',\n            createdAt: '2025-08-19'\n          }, {\n            id: 5,\n            title: 'Conexión lenta',\n            status: 'Resuelto',\n            priority: 'Media',\n            category: 'Red',\n            createdAt: '2025-08-18'\n          }],\n          ticketsByCategory: [{\n            name: 'Hardware',\n            value: 12\n          }, {\n            name: 'Software',\n            value: 19\n          }, {\n            name: 'Red',\n            value: 8\n          }, {\n            name: 'Correo',\n            value: 15\n          }, {\n            name: 'Otros',\n            value: 5\n          }],\n          ticketsByStatus: [{\n            name: 'Abiertos',\n            value: 12\n          }, {\n            name: 'En Progreso',\n            value: 8\n          }, {\n            name: 'En Espera',\n            value: 5\n          }, {\n            name: 'Resueltos',\n            value: 23\n          }]\n        });\n      }, 1000);\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al cargar los datos del dashboard');\n  }\n});\n\n// Slice del dashboard\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    // Reducers síncronos pueden ir aquí\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchDashboardData.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchDashboardData.fulfilled, (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    }).addCase(fetchDashboardData.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\n\n// Exportar acciones\nexport const {} = dashboardSlice.actions;\n\n// Exportar selectores\nexport const selectDashboardData = state => state.dashboard.data;\nexport const selectDashboardLoading = state => state.dashboard.loading;\nexport const selectDashboardError = state => state.dashboard.error;\n\n// Exportar el reducer\nexport default dashboardSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","data","loading","error","fetchDashboardData","_","rejectWithValue","Promise","resolve","setTimeout","totalTickets","openTickets","inProgressTickets","resolvedTickets","waitingTickets","recentTickets","id","title","status","priority","category","createdAt","ticketsByCategory","name","value","ticketsByStatus","_error$response","_error$response$data","response","message","dashboardSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","actions","selectDashboardData","dashboard","selectDashboardLoading","selectDashboardError","reducer"],"sources":["/home/anthony/Escritorio/ticket-system/frontend/src/features/dashboard/dashboardSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\n// Tipos para el estado del dashboard\ninterface DashboardData {\n  totalTickets: number;\n  openTickets: number;\n  inProgressTickets: number;\n  resolvedTickets: number;\n  waitingTickets: number;\n  recentTickets: Array<{\n    id: number;\n    title: string;\n    status: string;\n    priority: string;\n    category: string;\n    createdAt: string;\n  }>;\n  ticketsByCategory: Array<{ name: string; value: number }>;\n  ticketsByStatus: Array<{ name: string; value: number }>;\n}\n\ninterface DashboardState {\n  data: DashboardData | null;\n  loading: boolean;\n  error: string | null;\n}\n\n// Tipos exportados\nexport type { DashboardData, DashboardState };\n\n// Estado inicial\nconst initialState: DashboardState = {\n  data: null,\n  loading: false,\n  error: null,\n};\n\n// Async thunk para obtener los datos del dashboard\nexport const fetchDashboardData = createAsyncThunk<DashboardData, void, { state: RootState }>(\n  'dashboard/fetchData',\n  async (_, { rejectWithValue }) => {\n  try {\n    // En una aplicación real, esto haría una llamada a la API\n    // const response = await axios.get('/api/dashboard');\n    // return response.data;\n    \n    // Datos de ejemplo para desarrollo\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          totalTickets: 48,\n          openTickets: 12,\n          inProgressTickets: 8,\n          resolvedTickets: 23,\n          waitingTickets: 5,\n          recentTickets: [\n            { id: 1, title: 'Problema con el correo', status: 'Abierto', priority: 'Alta', category: 'Correo', createdAt: '2025-08-20' },\n            { id: 2, title: 'Error en el sistema', status: 'En Progreso', priority: 'Crítica', category: 'Software', createdAt: '2025-08-20' },\n            { id: 3, title: 'Impresora no funciona', status: 'En Espera', priority: 'Media', category: 'Hardware', createdAt: '2025-08-19' },\n            { id: 4, title: 'Acceso denegado', status: 'Resuelto', priority: 'Baja', category: 'Cuentas', createdAt: '2025-08-19' },\n            { id: 5, title: 'Conexión lenta', status: 'Resuelto', priority: 'Media', category: 'Red', createdAt: '2025-08-18' },\n          ],\n          ticketsByCategory: [\n            { name: 'Hardware', value: 12 },\n            { name: 'Software', value: 19 },\n            { name: 'Red', value: 8 },\n            { name: 'Correo', value: 15 },\n            { name: 'Otros', value: 5 },\n          ],\n          ticketsByStatus: [\n            { name: 'Abiertos', value: 12 },\n            { name: 'En Progreso', value: 8 },\n            { name: 'En Espera', value: 5 },\n            { name: 'Resueltos', value: 23 },\n          ],\n        });\n      }, 1000);\n    });\n  } catch (error: any) {\n    return rejectWithValue(error.response?.data?.message || 'Error al cargar los datos del dashboard');\n  }\n});\n\n// Slice del dashboard\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    // Reducers síncronos pueden ir aquí\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchDashboardData.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchDashboardData.fulfilled, (state, action) => {\n        state.loading = false;\n        state.data = action.payload;\n      })\n      .addCase(fetchDashboardData.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      });\n  },\n});\n\n// Exportar acciones\nexport const { } = dashboardSlice.actions;\n\n// Exportar selectores\nexport const selectDashboardData = (state: RootState) => state.dashboard.data;\nexport const selectDashboardLoading = (state: RootState) => state.dashboard.loading;\nexport const selectDashboardError = (state: RootState) => state.dashboard.error;\n\n// Exportar el reducer\nexport default dashboardSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}