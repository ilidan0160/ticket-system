{"ast":null,"code":"import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport authReducer from '../features/auth/authSlice';\nimport ticketReducer from '../features/tickets/ticketSlice';\nimport chatReducer from '../features/chat/chatSlice';\nimport dashboardReducer from '../features/dashboard/dashboardSlice';\n\n// Import the socket middleware with a type assertion\nconst socketMiddleware = require('../middleware/socketMiddleware').default;\n\n// Combine all reducers\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  tickets: ticketReducer,\n  chat: chatReducer,\n  dashboard: dashboardReducer\n});\n\n// Configure the store with proper middleware\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => {\n    return getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['tickets/setSocket', 'chat/setSocket'],\n        ignoredActionPaths: ['meta.arg', 'payload.timestamp', 'payload.callback'],\n        ignoredPaths: ['tickets.socket', 'chat.socket']\n      }\n    }).concat(socketMiddleware);\n  }\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store","map":{"version":3,"names":["configureStore","combineReducers","authReducer","ticketReducer","chatReducer","dashboardReducer","socketMiddleware","require","default","rootReducer","auth","tickets","chat","dashboard","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ignoredActionPaths","ignoredPaths","concat"],"sources":["/home/anthony/Escritorio/ticket-system/frontend/src/app/store.ts"],"sourcesContent":["import { configureStore, combineReducers, ThunkAction, Action } from '@reduxjs/toolkit';\nimport type { Middleware } from 'redux';\nimport authReducer from '../features/auth/authSlice';\nimport ticketReducer from '../features/tickets/ticketSlice';\nimport chatReducer from '../features/chat/chatSlice';\nimport dashboardReducer from '../features/dashboard/dashboardSlice';\n\n// Import the socket middleware with a type assertion\nconst socketMiddleware = require('../middleware/socketMiddleware').default as Middleware;\n\n// Combine all reducers\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  tickets: ticketReducer,\n  chat: chatReducer,\n  dashboard: dashboardReducer,\n});\n\n// Configure the store with proper middleware\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => {\n    return getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['tickets/setSocket', 'chat/setSocket'],\n        ignoredActionPaths: ['meta.arg', 'payload.timestamp', 'payload.callback'],\n        ignoredPaths: ['tickets.socket', 'chat.socket'],\n      },\n    }).concat(socketMiddleware);\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,eAAe,QAA6B,kBAAkB;AAEvF,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,gBAAgB,MAAM,sCAAsC;;AAEnE;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,gCAAgC,CAAC,CAACC,OAAqB;;AAExF;AACA,MAAMC,WAAW,GAAGR,eAAe,CAAC;EAClCS,IAAI,EAAER,WAAW;EACjBS,OAAO,EAAER,aAAa;EACtBS,IAAI,EAAER,WAAW;EACjBS,SAAS,EAAER;AACb,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMS,KAAK,GAAGd,cAAc,CAAC;EAClCe,OAAO,EAAEN,WAAW;EACpBO,UAAU,EAAGC,oBAAoB,IAAK;IACpC,OAAOA,oBAAoB,CAAC;MAC1BC,iBAAiB,EAAE;QACjBC,cAAc,EAAE,CAAC,mBAAmB,EAAE,gBAAgB,CAAC;QACvDC,kBAAkB,EAAE,CAAC,UAAU,EAAE,mBAAmB,EAAE,kBAAkB,CAAC;QACzEC,YAAY,EAAE,CAAC,gBAAgB,EAAE,aAAa;MAChD;IACF,CAAC,CAAC,CAACC,MAAM,CAAChB,gBAAgB,CAAC;EAC7B;AACF,CAAC,CAAC;;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}