{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  messages: [],\n  loading: false,\n  error: null,\n  isTyping: false,\n  typingUsers: {}\n};\n\n// Helper function to get auth header\nconst getAuthHeader = getState => ({\n  headers: {\n    Authorization: `Bearer ${getState().auth.token}`\n  }\n});\n\n// Async thunks\nexport const fetchChatMessages = createAsyncThunk('chat/fetchMessages', async (ticketId, {\n  getState\n}) => {\n  const response = await axios.get(`/api/chat/ticket/${ticketId}`, getAuthHeader(getState));\n  return response.data;\n});\nexport const sendMessage = createAsyncThunk('chat/sendMessage', async ({\n  ticketId,\n  message,\n  isInternal = false\n}, {\n  getState\n}) => {\n  const response = await axios.post('/api/chat/message', {\n    ticketId,\n    message,\n    isInternal\n  }, getAuthHeader(getState));\n  return response.data;\n});\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    addMessage: (state, action) => {\n      state.messages.push(action.payload);\n    },\n    setTyping: (state, action) => {\n      const {\n        userId,\n        isTyping\n      } = action.payload;\n      state.typingUsers = {\n        ...state.typingUsers,\n        [userId]: isTyping\n      };\n    },\n    clearChat: () => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchChatMessages.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchChatMessages.fulfilled, (state, action) => {\n      state.loading = false;\n      state.messages = action.payload;\n    }).addCase(fetchChatMessages.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to fetch messages';\n    }).addCase(sendMessage.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(sendMessage.fulfilled, (state, action) => {\n      state.loading = false;\n      state.messages.push(action.payload);\n    }).addCase(sendMessage.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to send message';\n    });\n  }\n});\nexport const {\n  addMessage,\n  setTyping,\n  clearChat\n} = chatSlice.actions;\nexport default chatSlice.reducer;\nexport const selectMessages = state => state.chat.messages;\nexport const selectChatLoading = state => state.chat.loading;\nexport const selectChatError = state => state.chat.error;\nexport const selectTypingUsers = state => state.chat.typingUsers;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","messages","loading","error","isTyping","typingUsers","getAuthHeader","getState","headers","Authorization","auth","token","fetchChatMessages","ticketId","response","get","data","sendMessage","message","isInternal","post","chatSlice","name","reducers","addMessage","state","action","push","payload","setTyping","userId","clearChat","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer","selectMessages","chat","selectChatLoading","selectChatError","selectTypingUsers"],"sources":["/home/anthony/Escritorio/ticket-system/frontend/src/features/chat/chatSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { RootState } from '../../app/store';\n\ninterface Message {\n  id: number;\n  mensaje: string;\n  isInternal: boolean;\n  ticketId: number;\n  userId: number;\n  createdAt: string;\n  updatedAt: string;\n  user?: {\n    id: number;\n    username: string;\n    email: string;\n    role: string;\n  };\n}\n\ninterface ChatState {\n  messages: Message[];\n  loading: boolean;\n  error: string | null;\n  isTyping: boolean;\n  typingUsers: { [key: string]: boolean };\n}\n\nconst initialState: ChatState = {\n  messages: [],\n  loading: false,\n  error: null,\n  isTyping: false,\n  typingUsers: {},\n};\n\n// Helper function to get auth header\nconst getAuthHeader = (getState: () => unknown) => ({\n  headers: {\n    Authorization: `Bearer ${(getState() as RootState).auth.token}`,\n  },\n});\n\n// Async thunks\nexport const fetchChatMessages = createAsyncThunk(\n  'chat/fetchMessages',\n  async (ticketId: number, { getState }) => {\n    const response = await axios.get(\n      `/api/chat/ticket/${ticketId}`,\n      getAuthHeader(getState)\n    );\n    return response.data;\n  }\n);\n\nexport const sendMessage = createAsyncThunk(\n  'chat/sendMessage',\n  async (\n    { ticketId, message, isInternal = false }: { ticketId: number; message: string; isInternal?: boolean },\n    { getState }\n  ) => {\n    const response = await axios.post(\n      '/api/chat/message',\n      { ticketId, message, isInternal },\n      getAuthHeader(getState)\n    );\n    return response.data;\n  }\n);\n\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    addMessage: (state, action: PayloadAction<Message>) => {\n      state.messages.push(action.payload);\n    },\n    setTyping: (state, action: PayloadAction<{ userId: string; isTyping: boolean }>) => {\n      const { userId, isTyping } = action.payload;\n      state.typingUsers = {\n        ...state.typingUsers,\n        [userId]: isTyping,\n      };\n    },\n    clearChat: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchChatMessages.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchChatMessages.fulfilled, (state, action) => {\n        state.loading = false;\n        state.messages = action.payload;\n      })\n      .addCase(fetchChatMessages.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || 'Failed to fetch messages';\n      })\n      .addCase(sendMessage.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(sendMessage.fulfilled, (state, action) => {\n        state.loading = false;\n        state.messages.push(action.payload);\n      })\n      .addCase(sendMessage.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || 'Failed to send message';\n      });\n  },\n});\n\nexport const { addMessage, setTyping, clearChat } = chatSlice.actions;\n\nexport default chatSlice.reducer;\n\nexport const selectMessages = (state: RootState) => state.chat.messages;\nexport const selectChatLoading = (state: RootState) => state.chat.loading;\nexport const selectChatError = (state: RootState) => state.chat.error;\nexport const selectTypingUsers = (state: RootState) => state.chat.typingUsers;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}